import { PrismaAdapter } from "@next-auth/prisma-adapter";import { NextAuthOptions } from "next-auth";import CredentialsProvider from "next-auth/providers/credentials";import bcrypt from "bcrypt";import prisma from "./prisma";export const authOptions: NextAuthOptions = {  adapter: PrismaAdapter(prisma),  providers: [    CredentialsProvider({      name: "Credentials",      credentials: {        email: { label: "Email", type: "email" },        password: { label: "Password", type: "password" },      },      async authorize(credentials) {        if (!credentials?.email || !credentials?.password) {          return null;        }        const user = await prisma.user.findUnique({          where: { email: credentials.email },        });        if (!user || !user.hashedPassword) {          return null;        }        const isPasswordValid = await bcrypt.compare(          credentials.password,          user.hashedPassword        );        if (!isPasswordValid) {          return null;        }        return {          id: user.id,          name: user.name,          email: user.email,          image: user.image,          role: user.role,        };      },    }),  ],  session: {    strategy: "jwt",  },  pages: {    signIn: "/login",    signOut: "/login",    error: "/login",  },  callbacks: {    async jwt({ token, user }) {      if (user) {        token.id = user.id;        token.role = (user as any).role; // Cast user to any to access role      }      return token;    },    async session({ session, token }) {      if (token.id) {        session.user.id = token.id as string;      }      if (token.role) {        session.user.role = token.role as string;      }      return session;    },  },  secret: process.env.NEXTAUTH_SECRET,};