generator client {  provider = "prisma-client-js"}datasource db {  provider = "sqlite"  url      = env("DATABASE_URL")}model Account {  id                String  @id @default(cuid())  userId            String  providerType      String  providerId        String  providerAccountId String  refreshToken      String?  accessToken       String?  accessTokenExpires DateTime?  createdAt         DateTime @default(now())  updatedAt         DateTime @updatedAt  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)  @@unique([providerId, providerAccountId])}model Session {  id           String   @id @default(cuid())  sessionToken String   @unique  userId       String  expires      DateTime  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)}model User {  id            String    @id @default(cuid())  name          String?  email         String?   @unique  emailVerified DateTime?  image         String?  hashedPassword String?  role          Role      @default(USER)  createdAt     DateTime  @default(now())  updatedAt     DateTime  @updatedAt  accounts      Account[]  sessions      Session[]  products      Product[]  orders        Order[]  conversations Conversation[]}model VerificationToken {  identifier String  token      String   @unique  expires    DateTime  @@unique([identifier, token])}enum Role {  USER  ADMIN}enum OrderStatus {  PENDING  CONFIRMED  DELIVERED  CANCELED}enum ConversationPlatform {  INSTAGRAM  FACEBOOK  WHATSAPP}enum MessageSenderType {  CUSTOMER  AI  SELLER}model Product {  id            String          @id @default(cuid())  userId        String  name          String  description   String?  price         Float  imageUrl      String?  createdAt     DateTime        @default(now())  updatedAt     DateTime        @updatedAt  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)  variants      ProductVariant[]  orderItems    OrderItem[]}model ProductVariant {  id          String    @id @default(cuid())  productId   String  size        String?  color       String?  stock       Int       @default(0)  sku         String?   @unique  createdAt   DateTime  @default(now())  updatedAt   DateTime  @updatedAt  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)  orderItems  OrderItem[]}model Order {  id              String         @id @default(cuid())  userId          String  customerName    String  customerPhone   String  customerAddress String?  totalAmount     Float  status          OrderStatus    @default(PENDING)  createdAt       DateTime       @default(now())  updatedAt       DateTime       @updatedAt  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)  orderItems      OrderItem[]}model OrderItem {  id               String         @id @default(cuid())  orderId          String  productVariantId String  quantity         Int  priceAtOrder     Float  createdAt        DateTime       @default(now())  updatedAt        DateTime       @updatedAt  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)}model Conversation {  id            String               @id @default(cuid())  userId        String  platform      ConversationPlatform  lastMessageAt DateTime             @default(now())  status        String               @default("OPEN") // e.g., OPEN, CLOSED, PENDING_HUMAN  createdAt     DateTime             @default(now())  updatedAt     DateTime             @updatedAt  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)  messages      Message[]}model Message {  id             String            @id @default(cuid())  conversationId String  senderType     MessageSenderType  content        String  createdAt      DateTime          @default(now())  updatedAt      DateTime          @updatedAt  conversation   Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)}