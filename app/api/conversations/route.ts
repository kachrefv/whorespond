import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const conversations = await prisma.conversation.findMany({      where: { userId: session.user.id },      include: { messages: { orderBy: { createdAt: 'asc' } } },      orderBy: { lastMessageAt: 'desc' },    });    return NextResponse.json(conversations);  } catch (error) {    console.error('Error fetching conversations:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function POST(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { platform, initialMessageContent } = await request.json();    if (!platform || !initialMessageContent) {      return new NextResponse('Missing required fields: platform, initialMessageContent', { status: 400 });    }    const conversation = await prisma.conversation.create({      data: {        userId: session.user.id,        platform,        messages: {          create: {            senderType: 'CUSTOMER',            content: initialMessageContent,          },        },      },      include: { messages: true },    });    return NextResponse.json(conversation, { status: 201 });  } catch (error) {    console.error('Error creating conversation:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}