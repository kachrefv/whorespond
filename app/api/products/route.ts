import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const products = await prisma.product.findMany({      where: { userId: session.user.id },      include: { variants: true },    });    return NextResponse.json(products);  } catch (error) {    console.error('Error fetching products:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function POST(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { name, description, price, imageUrl, variants } = await request.json();    if (!name || !price) {      return new NextResponse('Missing required fields: name, price', { status: 400 });    }    const product = await prisma.product.create({      data: {        userId: session.user.id,        name,        description,        price,        imageUrl,        variants: {          create: variants || [],        },      },      include: { variants: true },    });    return NextResponse.json(product, { status: 201 });  } catch (error) {    console.error('Error creating product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}