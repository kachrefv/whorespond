import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    const product = await prisma.product.findUnique({      where: { id, userId: session.user.id },      include: { variants: true },    });    if (!product) {      return new NextResponse('Product not found', { status: 404 });    }    return NextResponse.json(product);  } catch (error) {    console.error('Error fetching product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function PUT(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    const { name, description, price, imageUrl, variants } = await request.json();    const existingProduct = await prisma.product.findUnique({      where: { id, userId: session.user.id },    });    if (!existingProduct) {      return new NextResponse('Product not found or unauthorized', { status: 404 });    }    // Update product and its variants    const updatedProduct = await prisma.product.update({      where: { id },      data: {        name: name ?? existingProduct.name,        description: description ?? existingProduct.description,        price: price ?? existingProduct.price,        imageUrl: imageUrl ?? existingProduct.imageUrl,        variants: {          // Delete existing variants not in the new list          deleteMany: {            id: {              notIn: variants.filter((v: any) => v.id).map((v: any) => v.id),            },            productId: id,          },          // Update existing variants          upsert: variants.map((variant: any) => ({            where: { id: variant.id || 'new-variant-id' }, // Use a dummy ID for new variants            update: {              size: variant.size,              color: variant.color,              stock: variant.stock,              sku: variant.sku,            },            create: {              size: variant.size,              color: variant.color,              stock: variant.stock,              sku: variant.sku,            },          })),        },      },      include: { variants: true },    });    return NextResponse.json(updatedProduct);  } catch (error) {    console.error('Error updating product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function DELETE(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    const product = await prisma.product.findUnique({      where: { id, userId: session.user.id },    });    if (!product) {      return new NextResponse('Product not found or unauthorized', { status: 404 });    }    await prisma.product.delete({      where: { id },    });    return new NextResponse(null, { status: 204 });  } catch (error) {    console.error('Error deleting product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}