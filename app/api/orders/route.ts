import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const orders = await prisma.order.findMany({      where: { userId: session.user.id },      include: { orderItems: { include: { productVariant: { include: { product: true } } } } },      orderBy: { createdAt: 'desc' },    });    return NextResponse.json(orders);  } catch (error) {    console.error('Error fetching orders:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function POST(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { customerName, customerPhone, customerAddress, items } = await request.json();    if (!customerName || !customerPhone || !items || items.length === 0) {      return new NextResponse('Missing required fields: customerName, customerPhone, items', { status: 400 });    }    let totalAmount = 0;    const orderItemsData = [];    for (const item of items) {      const productVariant = await prisma.productVariant.findUnique({        where: { id: item.productVariantId },        include: { product: true },      });      if (!productVariant || productVariant.stock < item.quantity) {        return new NextResponse(`Product variant ${item.productVariantId} is out of stock or not found`, { status: 400 });      }      const itemPrice = productVariant.product.price * item.quantity;      totalAmount += itemPrice;      orderItemsData.push({        productVariantId: item.productVariantId,        quantity: item.quantity,        priceAtOrder: productVariant.product.price,      });      // Decrease stock      await prisma.productVariant.update({        where: { id: item.productVariantId },        data: { stock: { decrement: item.quantity } },      });    }    const order = await prisma.order.create({      data: {        userId: session.user.id,        customerName,        customerPhone,        customerAddress,        totalAmount,        status: 'PENDING',        orderItems: {          create: orderItemsData,        },      },      include: { orderItems: true },    });    return NextResponse.json(order, { status: 201 });  } catch (error) {    console.error('Error creating order:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}